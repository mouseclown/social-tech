<launch>

<arg name="topic_name" default="scan"/>
<arg name="frame_id" default="base_laser"/>
<arg name="port_name" default="/dev/ttyUSB0"/>
<arg name="port_baudrate" default="230400"/>
<arg name="fix_to_base_link" default="true"/>
<arg name="world_name" default="$(find SocialTech-Gazebo)/worlds/plano1.world"/>
<arg name="x" default="1.0"/>
<arg name="y" default="1.0"/>
<arg name="z" default="0.0"/>
<arg name="yaw" default="1.570796"/>

  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />
  <node pkg="tf" type="static_transform_publisher" name="odom_to_base_link" args="0 0 0 0 0 0 odom base_link 30" />
  
  <!-- IMU Data Publisher Using the BNO055 IMU Sensor / Tracer -->
  <!-- Publish: /imu/data -->
  <node ns="imu" name="imu_node" pkg="imu_bno055" type="bno055_i2c_node" respawn="true" respawn_delay="2">
  <param name="device" type="string" value="/dev/i2c-1"/>
  <param name="address" type="int" value="40"/> 
  <param name="frame_id" type="string" value="imu"/>
  </node>
  
  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="odom_data_quat" />
  <remap from="imu_data" to="imu/data" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
  <param name="output_frame" value="odom"/>
  <param name="base_footprint_frame" value="base_footprint"/>
  <param name="freq" value="30.0"/>
  <param name="sensor_timeout" value="1.0"/>
  <param name="odom_used" value="true"/>
  <param name="imu_used" value="true"/>
  <param name="vo_used" value="false"/>
  <param name="gps_used" value="false"/>
  <param name="debug" value="false"/>
  <param name="self_diagnose" value="false"/>
</node>

  <node
    name="tf_footprint_base"
    pkg="tf"
    type="static_transform_publisher"
    args="0 0 0 0 0 0 base_link base_footprint 40" />

    <param
    name="robot_description"
   command="$(find xacro)/xacro '$(find navstack_pub)/urdf/tracer2.xacro'" />
   
  <node name="base_to_laser" pkg="tf" type="static_transform_publisher"  args="0.0 0.0 0.18 0 0.0 0.0 base_link base_laser 50" if="$(arg fix_to_base_link)"/>
  
  <node
    name="robot_state_publisher"
    pkg="robot_state_publisher"
    type="robot_state_publisher" />
 
 <node
    name="joint_state_publisher"
    pkg="joint_state_publisher"
    type="joint_state_publisher" />
  
	
  <!-- Initial Pose and Goal Publisher -->
  <!-- Publish: /initialpose, /move_base_simple/goal -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find navstack_pub)/rviz/model_display.rviz" />
  

  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
  <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  </node>   

 <node name="LD06" pkg="ldlidar_stl_ros" type="ldlidar_stl_ros_node" output="screen" >
  <param name="product_name" value="LDLiDAR_LD06"/>
  <param name="frame_id" value="$(arg frame_id)"/>
  <param name="port_name" value ="$(arg port_name)"/>
  <param name="topic_name" value="$(arg topic_name)"/>
  <param name="port_baudrate" value ="$(arg port_baudrate)"/>
  <param name="angle_crop_min" type="double" value="90.0"/>
  <param name="angle_crop_max" type="double" value="90.0"/>
 </node>
 <node pkg="laser_filters" type="scan_to_scan_filter_chain"
      name="laser_filter">
    <rosparam command="load" file="$(find ldlidar_stl_ros)/launch/lidarfilter.yaml" />
     <remap from="scan" to="base_scan" />
     <remap from="scan_filtered" to="scan" />
  </node>
 
  <!-- Map File -->
  <arg name="map_file" default="/home/loyola/SocialTech_ws/src/SocialTech-Gazebo/maps/mymap.yaml"/>
	
  <!-- Map Server -->
  <!-- Publish: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	
  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <include file="$(find amcl)/examples/amcl_diff.launch"/>
	
  <!-- Move Base Node -->
  <!-- Subscribe: /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
  </node>

</launch>
